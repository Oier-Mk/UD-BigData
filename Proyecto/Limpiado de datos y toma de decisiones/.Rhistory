outliers$porcentajes = (int)(outliers$Streams/total*100);
outliers$porcentajes = (integer)(outliers$Streams/total*100);
outliers$porcentajes = integer(outliers$Streams/total*100);
outliers$porcentajes = integer(outliers$Streams/total*100);
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
outliers$label = sprintf ("%s %d %",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d '%'",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d /%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d \%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d"%,outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d %",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d \\\%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d \\%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d \\p%",outliers$Track, outliers$porcentajes)
outliers$label = sprintf ("%s %d \\p",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
outliers$label = sprintf ("%s %d %5C",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))[order(Streams),]
rownames(agrupadasPorCancion)[rownames(agrupadasPorCancion) == "Group.1"] = "Track"
rownames(agrupadasPorCancion)[rownames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
rownames(agrupadasPorCancion)[rownames(agrupadasPorCancion) == "Group.1"] = "Track"
rownames(agrupadasPorCancion)[rownames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion
rownames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
rownames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion
order( agrupadasPorCancion[,2] )
agrupadasPorCancion
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Spotify.R", echo=TRUE)
spotify=read.csv("spotify2.csv")
spotify <- read.csv2("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/spotify2.csv")
View(spotify)
# load the library
library(forcats)
library(ggplot2)
# Hacemos una limpieza de datos de todo lo que hemos traído de Spotify
str(spotify)
spotify$Date = as.Date(spotify$Date, "%m/%d/%Y")
# Podriamos dibujar algo??
summary(spotify)
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
spotify$StreamsNormalized = scale(spotify$Streams)
spotify = spotify %>% arrange(desc(Streams))
library(sqldf)
agrupadasPorCancion = sqldf('SELECT Track, SUM(Streams) AS Streams FROM spotify GROUP BY Track order by Streams desc')
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion[order( agrupadasPorCancion[,2] )]
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
agrupadasPorCancion = agrupadasPorCancion %>% (desc(Streams))
arrange
library(ggplot2)
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
library(dplyr)
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
agrupadasPorCancion
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams, legend.text = masEscuchadas$Track) #TODO ARREGLAR LEYENDA Y COLORES
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
View(masEscuchadas)
View(masEscuchadas)
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
hist(masEscuchadas$Streams, legend.text = masEscuchadas$Track) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams, legend.text = masEscuchadas$Track) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab=masEscuchadas$Streams) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab=masEscuchadas$Track) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones") #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Track,  main="Streams",
xlab="Nombre canciones") #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones") #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c("3 Gears", "4 Gears", "5 Gears")) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track)) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track) horiz = TRUE) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), horiz = TRUE) #TODO ARREGLAR LEYENDA Y COLORES
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), horiz = TRUE) #TODO ARREGLAR LEYENDA Y COLORES
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR LEYENDA Y COLORES
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
pie(masEscuchadas$Streams, names.arg=c(masEscuchadas$Track) #TODO ARREGLAR LEYENDA
pie(masEscuchadas$Streams, names.arg=c(masEscuchadas$Track)) #TODO ARREGLAR LEYENDA
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Spotify.R", echo=TRUE)
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
spotify <- read.csv2("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/spotify2.csv")
View(spotify)
# load the library
library(forcats)
library(ggplot2)
library(dplyr)
# Hacemos una limpieza de datos de todo lo que hemos traído de Spotify
str(spotify)
spotify$Date = as.Date(spotify$Date, "%m/%d/%Y")
# Podriamos dibujar algo??
summary(spotify)
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR TAMAÑO
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
p <- ggplot(spotify, aes(x=track, y=streams, fill=track)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
ggplot(spotify, aes(x=track, y=streams, fill=track)) +
geom_violin()
ggplot(spotify, aes(x=streams, y=streams, fill=track)) + geom_violin()
ggplot(spotify, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
kj
ggplot(masEscuchadas, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR TAMAÑO
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
filtroViolin = spotify$Track =
ggplot(masEscuchadas, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
View(outliers)
View(outliers)
filtroViolin = spotify$Track == "China" |  spotify$Track == "Otro Trago - Remix" |  spotify$Track == "Yo x Ti, Tu x Mi"
spotifyOutliers = spotify[filtroViolin,]
ggplot(spotifyOutliers, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR TAMAÑO
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
# load the library
library(forcats)
library(ggplot2)
library(dplyr)
# Hacemos una limpieza de datos de todo lo que hemos traído de Spotify
str(spotify)
spotify$Date = as.Date(spotify$Date, "%m/%d/%Y")
# Podriamos dibujar algo??
summary(spotify)
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR TAMAÑO
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
filtroViolin = spotify$Track == "China" |  spotify$Track == "Otro Trago - Remix" |  spotify$Track == "Yo x Ti, Tu x Mi"
spotifyOutliers = spotify[filtroViolin,]
ggplot(spotifyOutliers, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2) #TODO ARREGLAR TAMAÑO
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
slices <- c(masEscuchadas$Streams)
lbls <- c(masEscuchadas$Track)
pie(slices = lbls, col=rainbow(length(lbls)),
main="Mas escuchadas")
labels <- c(masEscuchadas$Track)
slices <- c(masEscuchadas$Streams)
lbls <- c(masEscuchadas$Track)
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Mas escuchadas")
pie(masEscuchadas$Streams, labels = masEscuchadas$Tracks) #TODO ARREGLAR LEYENDA
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2)
labels <- c(masEscuchadas$Track)
slices <- c(masEscuchadas$Streams)
lbls <- c(masEscuchadas$Track)
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Mas escuchadas")
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
filtroViolin = spotify$Track == "China" |  spotify$Track == "Otro Trago - Remix" |  spotify$Track == "Yo x Ti, Tu x Mi"
spotifyOutliers = spotify[filtroViolin,]
ggplot(spotifyOutliers, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
# load the library
library(forcats)
library(ggplot2)
library(dplyr)
# Hacemos una limpieza de datos de todo lo que hemos traído de Spotify
str(spotify)
spotify$Date = as.Date(spotify$Date, "%m/%d/%Y")
# Podriamos dibujar algo??
summary(spotify)
boxplot(spotify$Streams) #VEMOS LA MEDIA LOS CUARTILES Y QUE HAY MUCHOS OUTLIERS EN ESTE DATASET. HABR'IA QUE ESTUDIAR LOS OUTLIERS AGRUPADOS POR CANCION
agrupadasPorCancion = aggregate(spotify$Streams, FUN = sum, list(spotify$Track))
View(agrupadasPorCancion)
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "Group.1"] = "Track"
colnames(agrupadasPorCancion)[colnames(agrupadasPorCancion) == "x"] = "Streams"
agrupadasPorCancion = agrupadasPorCancion %>% arrange(desc(Streams))
masEscuchadas = agrupadasPorCancion[0:10, ]
barplot(masEscuchadas$Streams,  main="Streams",
xlab="Nombre canciones", horiz=TRUE,
names.arg=c(masEscuchadas$Track), cex.lab = 2)
labels <- c(masEscuchadas$Track)
slices <- c(masEscuchadas$Streams)
lbls <- c(masEscuchadas$Track)
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Mas escuchadas")
boxplot(masEscuchadas$Streams) #VEMOS QUE UNA DE LAS 10 CANCIONES AGRUPADAS SE HA ESCUCHADO MUCHO MAS
summary(masEscuchadas$Streams)
filtroOutliers = masEscuchadas$Streams > 19077408
outliers = masEscuchadas[filtroOutliers,] #LAS CANCIONES MAS ESCUCHADAS HAN SIDO LAS SIGUIENTES
library(plotrix)
total = 32547394 + 20406569 + 19775898
outliers$porcentajes = as.integer(outliers$Streams/total*100);
outliers$label = sprintf ("%s %d/100",outliers$Track, outliers$porcentajes)
pie3D(outliers$Streams, labels=outliers$label)
filtroViolin = spotify$Track == "China" |  spotify$Track == "Otro Trago - Remix" |  spotify$Track == "Yo x Ti, Tu x Mi"
spotifyOutliers = spotify[filtroViolin,]
View(spotify)
View(spotifyOutliers)
ggplot(spotifyOutliers, aes(x=Track, y=Streams, fill=Track)) + geom_violin()
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
wealthy = as.data.frame( data[data$AMT_INCOME_TOTAL > 202500,])
summary(wealthy)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
carOwners = wealthy = as.data.frame( data[na.ommir(data$OWN_CAR_AGE) ,])
carOwners = wealthy = as.data.frame( data[na.ommit(data$OWN_CAR_AGE) ,])
carOwners = wealthy = as.data.frame( data[na.omit(data$OWN_CAR_AGE) ,])
View(carOwners)
View(spotify)
carOwners = wealthy = as.data.frame( data[data$OWN_CAR_AGE > 0 ,])
View(carOwners)
carOwners = wealthy = as.data.frame( na.omit(data[data$OWN_CAR_AGE > 0) ,])
carOwners = wealthy = as.data.frame( na.omit(data[data$OWN_CAR_AGE > 0)) ,])
carOwners = wealthy = as.data.frame( na.omit(data[data$OWN_CAR_AGE > 0 ,]))
boxplot(carOwners$OWN_CAR_AGE)
posiblesDenegados =
#ESTUDIO DE OUTLIERS COMO CASO PARTICULAR DE ESTUDIO
denegados =
casosEstudio =
#EN CASO DE QUE LOS GASTOS DEL USUARIO NO SUPEREN EL 30% DE LOS INGRESOS ANUALES --> SE ACEPTA AUTOMATICAMENTE
filtro = data$AMT_CREDIT < data$AMT_INCOME_TOTAL * 0.3
aceptados = datos[filtro,]
aceptados = data[filtro,]
View(aceptados)
posiblesDenegados =
#ESTUDIO DE OUTLIERS COMO CASO PARTICULAR DE ESTUDIO
denegados =
casosEstudio =
#EN CASO DE QUE LOS GASTOS DEL USUARIO NO SUPEREN EL 40% DE LOS INGRESOS ANUALES --> SE ACEPTA AUTOMATICAMENTE
filtro = data$AMT_CREDIT < data$AMT_INCOME_TOTAL * 0.4
aceptados = data[filtro,]
filtro = data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4
posiblesDenegados = data[filtro,]
View(posiblesDenegados)
boxplot(posiblesDenegados$AMT_INCOME_TOTAL * 0.4)
boxplot(posiblesDenegados$AMT_INCOME_TOTAL * 0.4)
summary(posiblesDenegados$AMT_INCOME_TOTAL * 0.4))
summary(posiblesDenegados$AMT_INCOME_TOTAL * 0.4)
filtro = posiblesDenegados$AMT_INCOME_TOTAL * 0.4 > 81000
denegados = posiblesDenegados[filtro,]#OUTLIERS
View(denegados)
filtro = posiblesDenegados$AMT_INCOME_TOTAL * 0.4 <= 81000
casosEstudio = posiblesDenegados[filtro,]
View(casosEstudio)
View(aceptados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
write_xlsx(casosEstudio,"XLSX/Split/AEstudiar.xlsx")
write_xlsx(casosEstudio,path+"AEstudiar.xlsx")
path = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/ShinyDisplayDeConclusiones/DatosParaMostrar/"
write_xlsx(casosEstudio,path+"AEstudiar.xlsx")
write_xlsx(casosEstudio,paste(path, "AEstudiar.xlsx")
write_xlsx(casosEstudio,paste(path, "AEstudiar.xlsx"))
write_xlsx(casosEstudio,enlace)
enlace = paste(path, "AEstudiar.xlsx")
write_xlsx(casosEstudio,enlace)
enlace = paste(path, "Aceptados.xlsx") write_xlsx(casosEstudio,enlace)
enlace = paste(path, "Aceptados.xlsx")
write_xlsx(casosEstudio,enlace)
write_xlsx(denegados,"XLSX/Split/Denegados.xlsx")
enlace = paste(path, "Denegados.xlsx") write_xlsx(casosEstudio,enlace)
enlace = paste(path, "Denegados.xlsx")
write_xlsx(casosEstudio,enlace)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
filtro = data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4
filtro = omit.na(casosEstudio$CNT_CHILDREN)
filtro = na.omit(casosEstudio$CNT_CHILDREN)
conHijos = casosEstudio[filtro,]
View(conHijos)
filtro = is.na(casosEstudio$CNT_CHILDREN)
sinHijos = casosEstudio[filtro,]
View(sinHijos)
filtro = casosEstudio$CNT_CHILDREN > 0
conHijos = casosEstudio[filtro,]
filtro = casosEstudio$CNT_CHILDREN == 0
sinHijos = casosEstudio[filtro,]
View(sinHijos)
View(sinHijos)
View(conHijos)
filtro = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8
casosEstudio = casosEstudio[filtro,]
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(casosEstudio2)
View(aceptados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(casosEstudio)
View(aceptados)
View(casosEstudio)
View(denegados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(aceptados)
filtro = casosEstudio$AMT_CREDIT >= casosEstudio$AMT_GOODS_PRICE * 0.8
denegados = denegados[filtro,]
filtro = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8 #TODO BORRAR LOS NA
aceptados =  na.ommit(rbind(casosEstudio[filtro,],aceptados))
aceptados =  na.omit(rbind(casosEstudio[filtro,],aceptados))
aceptados =  rbind(casosEstudio[filtro,],aceptados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
filtro = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8 #TODO BORRAR LOS NA
prov = casosEstudio[filtro,]
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(prov)
filtro = casosEstudio$AMT_CREDIT >= casosEstudio$AMT_GOODS_PRICE * 0.8
denegados = denegados[filtro,]
filtro = casosEstudio$AMT_CREDIT >= casosEstudio$AMT_GOODS_PRICE * 0.8
casosEstudio = casosEstudio[filtro,]
library("readxl")
library("writexl")
library("ggplot2")
path = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/ShinyDisplayDeConclusiones/DatosParaMostrar/"
data <- read_excel("XLSX/DatosLimpios.xlsx")
enteros = data.frame(data$TARGET,	data$CODE_GENDER,	data$CNT_CHILDREN,	data$AMT_INCOME_TOTAL,	data$AMT_CREDIT,	data$AMT_ANNUITY,	data$AMT_GOODS_PRICE,	data$REGION_POPULATION_RELATIVE,	data$DAYS_BIRTH,	data$DAYS_EMPLOYED,	data$DAYS_REGISTRATION,	data$DAYS_ID_PUBLISH,	data$OWN_CAR_AGE,	data$FLAG_EMP_PHONE,	data$FLAG_WORK_PHONE,	data$FLAG_CONT_MOBILE,	data$FLAG_PHONE,	data$FLAG_EMAIL,	data$CNT_FAM_MEMBERS,	data$REGION_RATING_CLIENT,	data$HOUR_APPR_PROCESS_START,	data$APARTMENTS_AVG,	data$DEF_CNT_SOCIAL_CIRCLE,	data$DAYS_LAST_PHONE_CHANGE,	data$AMT_REQ_CREDIT_BUREAU)
summary(enteros)
correlacion = round(cor(enteros),digits = 2)
correlacion = as.data.frame(t(correlacion))
summary(correlacion)
filtro = data$AMT_CREDIT < data$AMT_INCOME_TOTAL * 0.4
aceptados = data[filtro,]
filtro = data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4
posiblesDenegados = data[filtro,]
summary(posiblesDenegados$AMT_INCOME_TOTAL * 0.4)
filtro = posiblesDenegados$AMT_INCOME_TOTAL * 0.4 > 81000
denegados = posiblesDenegados[filtro,] #OUTLIERS
filtro = posiblesDenegados$AMT_INCOME_TOTAL * 0.4 <= 81000
casosEstudio = posiblesDenegados[filtro,]
filtro = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8 #TODO BORRAR LOS NA
prov = casosEstudio[filtro,]
casosEstudio$inferior08 = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
aceptados =  rbind(rep(prov),rep( aceptados))
aceptados =  rbind(rep(prov),rep( aceptados),aceptados)
filtro = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8 #TODO BORRAR LOS NA
casosEstudio$inferior08 = casosEstudio$AMT_CREDIT < casosEstudio$AMT_GOODS_PRICE * 0.8
filtro = casosEstudio$inferior08 == TRUE
prov = casosEstudio[filtro,]
prov$inferior08 = NULL
aceptados =  rbind(prov,aceptados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
casosEstudio = casosEstudio[filtro,]
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
str(prov)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(casos)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
conProp = casosEstudio[omit.na(casosEstudio$APARTMENTS_AVG),]
conProp = casosEstudio[na.omit(casosEstudio$APARTMENTS_AVG),]
str(casosEstudio$APARTMENTS_AVG)
summary(casosEstudio$APARTMENTS_AVG)
conProp = casosEstudio[na.omit(casosEstudio$APARTMENTS_AVG),]
summary(casosEstudio$APARTMENTS_AVG)
conProp = casosEstudio[na.omit(casosEstudio$APARTMENTS_AVG),]
conProp = casosEstudio[na.omit(casosEstudio$APARTMENTS_AVG),]
str(casosEstudio$APARTMENTS_AVG)
summary(casosEstudio$APARTMENTS_AVG)
filtro = na.omit(casosEstudio$APARTMENTS_AVG)
summary(filtro)
conProp = casosEstudio[filtro,]
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
rlang::last_error()
conProp = casosEstudio[filtro,]
casosEstudio$apartamento = is.na(casosEstudio$APARTMENTS_AVG)
conProp = casosEstudio[apartamento == FALSE,]
conProp = casosEstudio[casosEstudio$apartamento == FALSE,]
View(conProp)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(conProp)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(denegados2)
View(denegados)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
View(casosEstudio)
#PROPIEDADES
summary(is.na(casosEstudio$APARTMENTS_AVG))
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
casosEstudio$apartamento = NULL;
denegados2$apartamento = NULL;
#SI TIENE PROPIEDADES Y NO TIENE HIJOS SE CONCEDE
filtro = casosEstudio$CNT_CHILDREN == 0
aceptados2 = casosEstudio[filtro,] #ACEPTADOS2 -> ACEPTADOS PORQUE NO TIENEN HIJOS
View(aceptados2)
#SI TIENE PROPIEDADES Y TIENE HIJOS SE ESTUDIA
filtro = casosEstudio$CNT_CHILDREN > 0
casosEstudio = casosEstudio[filtro,]
