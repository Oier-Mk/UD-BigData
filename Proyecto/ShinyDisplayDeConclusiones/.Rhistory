shiny::runApp()
data <- read_excel("DatosParaMostrar/data.xlsx")
filtro = data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4
posiblesDenegados = data[filtro,]
filtro = data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4
filtro = (data$AMT_CREDIT >= data$AMT_INCOME_TOTAL * 0.4)
filtro = (data$AMT_CREDIT >= data$AMT_INCOME_TOTAL )
posiblesDenegados = data[filtro,]
# Define UI for application that draws a histogram
library(shiny)
ui <- fluidPage(
actionButton("go", "Boxplot"),
)
server <- function(input, output) {
output$plot <- renderPlot({
boxplot(posiblesDenegados$AMT_INCOME_TOTAL * 0.4)
})
observeEvent(input$go, {
showModal(modalDialog(
plotOutput("plot"),
footer = NULL,
easyClose = TRUE
))
})
}
shinyApp(ui, server)
denegados <- read_excel("DatosParaMostrar/Denegados.xlsx")
aceptados <- read_excel("DatosParaMostrar/Aceptados.xlsx")
estudiar <- read_excel("DatosParaMostrar/AEstudiar.xlsx")
pie(aceptados$NAME_EDUCATION_TYPE)
pie(table(aceptados$NAME_EDUCATION_TYPE))
runApp()
ui <- fluidPage(
label("Aceptados"),
actionButton("go", "Pieplot con tipos de trabajo"),
)
server <- function(input, output) {
output$plot <- renderPlot({
pie(table(aceptados$NAME_EDUCATION_TYPE))
})
observeEvent(input$go, {
showModal(modalDialog(
plotOutput("plot"),
footer = NULL,
easyClose = TRUE
))
})
}
runApp()
library("readxl")
library("writexl")
library("ggplot2")
datos <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- grepl(datos$STATE, "A", fixed = TRUE)
aceptados <- grepl(datos$STATE, "A")
datos <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
datos$aceptados <- grepl(datos$STATE, "A")
View(datos)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/Limpiado de datos y toma de decisiones/TomaDeDecisiones.R", echo=TRUE)
shiny::runApp()
runApp()
aceptados <- data[data$STATE = "A",]
aceptados <- data[data$STATE = TRUE,]
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE = TRUE,]
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE =+ TRUE,]
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
# Define UI for application that draws a histogram
library(shiny)
ui <- fluidPage(
titlePanel("Basic widgets"),
actionButton("tdt", "Pieplot con tipos de trabajo"),
actionButton("go", "Pieplot con tipos de trabajo"),
)
server <- function(input, output) {
output$pieplot <- renderPlot({
pie(table(aceptados$NAME_EDUCATION_TYPE))
})
observeEvent(
input$tdt, {
showModal(modalDialog(
plotOutput("pieplot"),
footer = NULL,
easyClose = TRUE
))
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
# Define UI for application that draws a histogram
library(shiny)
ui <- fluidPage(
titlePanel("Basic widgets"),
actionButton("tdt", "Pieplot con tipos de trabajo"),
actionButton("ad", "Pieplot con tipos de trabajo"),
)
server <- function(input, output) {
# output$pieplot <- renderPlot({
#   pie(table(data$NAME_EDUCATION_TYPE))
# })
output$pieplot <- renderPlot({
# Basic piechart
ggplot(data, aes(x="nombre", y=NAME_EDUCATION_TYPE, fill=NAME_EDUCATION_TYPE)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
})
observeEvent(
input$tdt, {
showModal(modalDialog(
plotOutput("pieplot"),
footer = NULL,
easyClose = TRUE
))
})
}
shinyApp(ui, server)
ggplot(data,aes(x=NAME_EDUCATION_TYPE,y=AMT_CREDIT))+geom_boxplot()
runApp()
runApp()
runApp()
runApp()
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
View(aceptados)
runApp()
View(aceptados)
runApp()
View(aceptados)
ggplot(aceptados,aes(x=ITERATION,y=AMT_CREDIT))+geom_boxplot()
shiny::runApp()
summary(output$tiposCantidad)
summary(tiposCantidad)
summary(data$NAME_INCOME_TYPE)
tapply(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
library("psych")
install.packages("psych")
library("psych")
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, mat = TRUE)
tapply(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
tapply(data$AMT_INCOME_TOTAL,data$AMT_CREDIT, summary)
data[, as.list(summary(data)), by = AMT_INCOME_TOTAL]
data[, as.list(summary(data)), by = data$AMT_INCOME_TOTAL]
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
runApp()
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Pensioner"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "State servant"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Unemployed"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Working"
summary(data[filtro,])
summary(data[filtro,]$AMT_CREDIT)
variable = summary(data[filtro,])
runApp()
summary(variable$AMT_CREDIT)
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = summary(data[filtro,])
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Pensioner"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "State servant"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Unemployed"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Working"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
View(variable)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/ShinyDisplayDeConclusiones/Summarys.R", echo=TRUE)
runApp()
summary(data$AMT_CREDIT)
runApp()
shiny::runApp()
write_xlsx(aceptados7,"XLSX/Split/Aceptados7.xlsx")
data <- read_excel("XLSX/DatosLimpios.xlsx")
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("XLSX/DatosLimpios.xlsx")
shiny::runApp()
table(aceptados$ITERATION)
table(denegados$ITERATION)
runApp()
runApp()
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
output$piramide <- renderPlot({
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
})
observeEvent(
input$piramide, {
showModal(modalDialog(
plotOutput("piramide"),
footer = NULL,
easyClose = TRUE
))
})
server <- function(input, output) {
output$tiposCantidad <- renderPlot({
ggplot(data,aes(x=NAME_INCOME_TYPE,y=AMT_CREDIT))+geom_boxplot()
})
observeEvent(
input$tiposCantidad, {
showModal(modalDialog(
plotOutput("tiposCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$aIteracionesCantidad <- renderPlot({
ggplot(aceptados, aes(x=ITERATION, fill=ITERATION )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
})
observeEvent(
input$aIteracionesCantidad, {
showModal(modalDialog(
plotOutput("aIteracionesCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$dIteracionesCantidad <- renderPlot({
ggplot(denegados, aes(x=ITERATION, fill=ITERATION )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
})
observeEvent(
input$dIteracionesCantidad, {
showModal(modalDialog(
plotOutput("dIteracionesCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$piramide <- renderPlot({
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
})
observeEvent(
input$piramide, {
showModal(modalDialog(
plotOutput("piramide"),
footer = NULL,
easyClose = TRUE
))
})
}
# Libraries
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
ui <- navbarPage("Concesión de créditos",
tabPanel("TiposCantidad",
plotOutput("tiposCantidad"),
actionButton("Summary",verbatimTextOutput("summaryTiposCantidad"))
),
tabPanel("IteracionesCantidad"),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- navbarPage("Concesión de créditos",
tabPanel("Concesión de créditos",
titlePanel("Concesión de créditos\n\n"),
imageOutput("logo"), align =  "Center"
),
tabPanel("TiposCantidad",
plotOutput("tiposCantidad"),
actionButton(verbatimTextOutput("summaryTiposCantidad"),"Summary")
),
tabPanel("IteracionesCantidad",
plotOutput("aIteracionesCantidad"),
plotOutput("dIteracionesCantidad")
)
)
shiny::runApp()
runApp()
runApp()
runApp()
library("theme_ipsum")
install.packages("theme_ipsum")
library(hrbrthemes)
library(tidyverse)
library(hrbrthemes)
library(viridis)
